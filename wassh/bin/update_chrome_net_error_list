#!/usr/bin/env python3
# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Update net error list from Chrome.

Since Chrome doesn't seem to expose this to the JS world anywhere, we need to
manually maintain this list ourselves.

The template will be a C/C++ file with the format:
  // Comment.
  NET_ERROR(IO_PENDING, -1)
"""

import logging
import re
import sys

import wassh
import libdot  # pylint: disable=wrong-import-order


NET_ERROR_LIST = wassh.DIR / "js" / "chrome_net_error_list.js"


HEADER = """\
// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Chrome net_error_list constants.
 */

/* eslint-disable max-len */

"""


def fetch_net_error_list():
    """Download latest net_error_list.h from Chrome."""
    rev = "HEAD"
    uri = (
        "https://chromium.googlesource.com/chromium/src/+/"
        f"{rev}/net/base/net_error_list.h?format=TEXT"
    )

    logging.info("Fetching %s", uri)
    return libdot.fetch_data(uri, b64=True).getvalue().decode("utf-8")


def get_parser():
    """Get a command line parser."""
    parser = libdot.ArgumentParser(description=__doc__)
    return parser


def main(argv):
    """The main func!"""
    parser = get_parser()
    _opts = parser.parse_args(argv)

    template = fetch_net_error_list()
    errors = {
        "SUCCESS": 0,
    }
    matcher = re.compile(r"^NET_ERROR\(([^,]*), *([^)]*)\)")
    for line in template.splitlines():
        m = matcher.match(line)
        if m:
            name, value = m.groups()
            errors[name] = int(value)

    logging.info("Updating %s", NET_ERROR_LIST)
    with NET_ERROR_LIST.open("w", encoding="utf-8") as fp:
        fp.write(HEADER)
        for name, value in sorted(
            errors.items(), key=lambda x: x[1], reverse=True
        ):
            fp.write(f"export const {name} = {value};\n")


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
