#!/usr/bin/env python3
# Copyright 2019 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Update our pinned copy of node to match Chromium."""

import logging
import re
import sys

import libdot


URI_BASE = "https://chromium.googlesource.com/chromium/src/+/HEAD"

# Where in Chromium's tree they maintain the version.
# Look for 'src/third_party/node/linux' here:
# https://chromium.googlesource.com/chromium/src/+/HEAD/DEPS
URI_VER = f"{URI_BASE}/DEPS"

# File which records the node settings.
NODE_SCRIPT = libdot.BIN_DIR / "node"


def update_file(var, value):
    """Update |var| in |path| with the new |value|."""
    # Read the current file.
    lines = NODE_SCRIPT.read_text(encoding="utf-8").splitlines()

    # Try to update the variable in the file.
    matcher = re.compile(rf'{var} = "(.*)"')
    for i, line in enumerate(lines):
        match = matcher.match(line)
        if match:
            old_value = match.group(1)
            if value != old_value:
                logging.info("  Old value was %s", old_value)
                lines[i] = f'{var} = "{value}"'
                break
            else:
                logging.info("  Value up-to-date already")
                return
    else:
        logging.error("Unable to locate %s setting in %s", var, NODE_SCRIPT)
        sys.exit(1)

    # Write out the new file content.
    NODE_SCRIPT.write_text("\n".join(lines) + "\n", encoding="utf-8")


def update_hash(var: str, deps: dict) -> None:
    """Update |var| in our tree with the |new_hash|."""
    # The structure expected is:
    # {
    #   ...
    #   'dep_type': 'gcs',
    #   'bucket': 'chromium-nodejs',
    #   'objects': [ {
    #     'object_name': 'fa98c6432de572206bc5519f85e9c96bd518b039',
    #     'sha256sum': 'fb563633b5bfe2d4307075c54c6bb54664a3b5ec6bc811f5b1...',
    #     'size_bytes': 50288755,
    #     'generation': 1730835522207929,
    #     'output_file': 'node-linux-x64.tar.gz',
    #   } ]
    # }
    if deps["dep_type"] != "gcs" or deps["bucket"] != "chromium-nodejs":
        logging.error("Unknown dep type: %s", deps)
        return
    objects = deps["objects"]
    if len(objects) != 1:
        logging.error("Too many objects: %s", objects)
        return
    new_hash = objects[0]["object_name"]
    logging.info("Updating %s with hash %s", var, new_hash)
    update_file(var, new_hash)


def fetch_deps(uri: str) -> dict:
    """Fetch & parse Chromium DEPS file."""
    data = fetch_data(uri)
    # Very basic implementation of the format to get the data we care about.
    context = {
        "Str": str,
        "Var": lambda x: x,
    }
    exec(compile(data, uri, "exec"), context)  # pylint: disable=exec-used
    return context["deps"]


def fetch_data(uri):
    """Read the gitiles base64 encoded data from |uri|."""
    data = libdot.fetch_data(f"{uri}?format=TEXT", b64=True)
    return data.getvalue().decode("utf-8").strip()


def get_parser():
    """Get a command line parser."""
    parser = libdot.ArgumentParser(description=__doc__)
    return parser


def main(argv):
    """The main func!"""
    parser = get_parser()
    _opts = parser.parse_args(argv)

    deps = fetch_deps(URI_VER)
    update_hash("NODE_LINUX_HASH", deps["src/third_party/node/linux"])
    update_hash("NODE_MAC_HASH", deps["src/third_party/node/mac"])
    update_hash("NODE_WIN_HASH", deps["src/third_party/node/win"])


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
